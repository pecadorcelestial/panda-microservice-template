//Librería para administración de MongoDB.
import mongoose from 'mongoose';
//Modelo.
import AddressModel from './address';
//Configuración de ambiente.
process.env.NODE_ENV = 'test';
//Archivo de configuración.
import configuration from '../configuration';

const clearDB = () => {
    for(let i in mongoose.connection.collections) {
        mongoose.connection.collections[i].drop(() => {});
    }
}

beforeAll((done: jest.DoneCallback) => {
    if(mongoose.connection.readyState === 0) {
        mongoose.connect(configuration.connection.url, { useCreateIndex: true, useNewUrlParser: true }, (error: any) => {
            if(error) throw error;
            clearDB();
            return done();
        });
    } else {
        clearDB();
        return done();
    }
});

afterAll((done: jest.DoneCallback) => {
    clearDB();
    mongoose.connection.close();
    return done();
});

describe('Pruebas básicas sobre el modelo de direcciones.', () => {

    let _id: string;

    test('Crea una dirección.', (done: jest.DoneCallback) => {
        let address = {
            parentId: "5c6f2856f002554ab4b07fd5",
            street: "Nogal",
            outdoorNumber: "121",
            interiorNumber: "3er. Piso",
            settlement: "Arboledas",
            location: "",
            reference: "",
            latitude: 20.6165895,
            longitude: -100.3889093,
            loc: {
                type: "Point",
                coordinates: [-100.3889093, 20.6165895]
            },
            zipCode: 76140,
            zipCodeId: 1
        };
        new AddressModel(address).save((error: any, data: any) => {
            expect(data).toHaveProperty('parentId');
            expect(data.street).toBe('Nogal');
            expect(data).toHaveProperty('outdoorNumber');
            expect(data).toHaveProperty('interiorNumber');
            expect(data).toHaveProperty('settlement');
            expect(data).toHaveProperty('location');
            expect(data).toHaveProperty('reference');
            expect(data).toHaveProperty('latitude');
            expect(data).toHaveProperty('longitude');
            expect(data).toHaveProperty('zipCode');
            expect(data).toHaveProperty('createdAt');
            expect(data).toHaveProperty('updatedAt');
            return done();
        });
    });
    test('Busca todas las direcciones.', (done: jest.DoneCallback) => {
        AddressModel.find((error: any, data: any) => {
            _id = data[0]._id;
            expect(Array.isArray(data)).toBeTruthy();
            expect(data.length).toBe(1);
            done();
        });
    });
    test('Actualiza una dirección.', (done: jest.DoneCallback) => {
        let newAddress = {
            id: _id,
            reference: 'Sobre la alberca de Aquarium.'
        };
        //NOTA: Al parecer el campo por el cual se va a buscar debe estar incluido en el arreglo de propiedades.
        AddressModel.findOneAndUpdate({ _id }, newAddress, { new: true }, (error: any, data: any) => {
            expect(data.reference).toBe('Sobre la alberca de Aquarium.');
            done();
        });
    });
});